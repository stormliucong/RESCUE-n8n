{
  "createdAt": "2025-03-11T17:08:23.620Z",
  "updatedAt": "2025-05-06T20:54:40.000Z",
  "id": "p5CG6PCfoYNp850m",
  "name": "Schedule Agent Design Baseline",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Webhook').item.json.body.prompt}}",
        "options": {
          "systemMessage": "={{ $json.system_prompt }}",
          "maxIterations": 10
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -120,
        -400
      ],
      "id": "27bde61c-4b73-4ed7-bd5a-5a3bb344410d",
      "name": "Schedule Agent",
      "executeOnce": false,
      "retryOnFail": false
    },
    {
      "parameters": {
        "toolDescription": "Search for resources of a given type",
        "url": "={{ $('Webhook').item.json.body.fhir_server_url}}/{resourceType}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={query_parameter_in_json}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "{query_parameter_in_json}",
              "description": "a json format parameter list for searching for resources with specific parameters"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -260,
        -80
      ],
      "id": "a5cd69d6-e189-4005-b913-65d2a91bb473",
      "name": "getAllResources",
      "credentials": {
        "httpBasicAuth": {
          "id": "vGFLDBapGQbigX65",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Search for all resources of a given type",
        "method": "POST",
        "url": "={{ $('Webhook').item.json.body.fhir_server_url }}/{resourceType}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={query_parameter_in_json}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "{query_parameter_in_json}",
              "description": "a json format parameter list for searching for resources with specific parameters"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        40,
        -80
      ],
      "id": "0689f0e2-0685-4645-952e-007ab05462bd",
      "name": "createResource",
      "credentials": {
        "httpBasicAuth": {
          "id": "vGFLDBapGQbigX65",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Update a specific resource",
        "method": "PUT",
        "url": "={{ $('Webhook').item.json.body.fhir_server_url }}/{resourceType}/{resourceId}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={fhir_payload}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "{fhir_payload}",
              "description": "resource payload in fhir json format to be updated"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        180,
        -80
      ],
      "id": "3304c519-1cdf-4123-8ca3-8a586eef55c9",
      "name": "updateResource",
      "credentials": {
        "httpBasicAuth": {
          "id": "vGFLDBapGQbigX65",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -180,
        160
      ],
      "id": "8adbbddc-b0a2-470e-8101-9030af75435d",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"isEligible\": {\n\t\t\t\"type\": [\"integer\", \"string\"]\n\t\t},\n\t\t\"reason\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -20,
        160
      ],
      "id": "e8983660-489c-46cc-a18a-9a5a1f378a3a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are a verification agent responsible for determining whether the hospital can handle a patient\u2019s case or if a referral to Trilogy is necessary based on the following criteria. Only perform checks when it is clearly stated that eligibility needs to be confirmed. No further scheduling tasks will be handled at this stage.\n\nSkip Eligibility Check (isEligible = -1): If no changes or modifications are needed regarding the patient\u2019s appointment, eligibility check can be skipped. This means the patient should be considered eligible without further review.\n\nCriteria for Eligibility Check:\n\nPatients under 1 year old can be directly accepted by the hospital without further checks.\nThe patient should be checked for specialized genetic tests or treatments that may be outside the hospital\u2019s current capabilities. If the case requires advanced genetic testing or specialized medical interventions, a referral to Trilogy might be necessary.\nIf the patient requires diagnostic tools or treatment facilities not available at the hospital, such as advanced imaging or laboratory equipment, they may need to be referred elsewhere.\nIf the patient\u2019s condition requires intensive monitoring or specialized genetic treatments that the hospital cannot provide, a referral will be required.\n\n\nPerform Eligibility Check (isEligible = 0 or 1): If eligibility check is requested (i.e., there are changes to the appointment or the patient's situation needs to be reassessed), the agent will assess based on the above criteria.\n\nIf you need to get the patient info, always use first name last name and birthdate, retrieve their record using things like:\nGET https://your-fhir-server.com/Patient?given=John&family=Doe&birthdate=eq1980-01-01\n\n\ne.g.:\n{\n\t\"isEligible\":0,\n        \"reason: ... \n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -180,
        300
      ],
      "id": "51179083-6bf0-4c1d-82b2-65153ee55793",
      "name": "Verification Agent"
    },
    {
      "parameters": {
        "toolDescription": "referral check",
        "url": "/api/eligibility/check-referral"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -180,
        580
      ],
      "id": "d61f6bd4-c436-4ad6-902e-8dd9dbbeef0c",
      "name": "referralCheck"
    },
    {
      "parameters": {
        "toolDescription": "preAuthCheck",
        "url": "/api/eligibility/check-pre-authorization"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        100,
        580
      ],
      "id": "ced676cf-322a-4118-8d61-974765699762",
      "name": "preAuthCheck"
    },
    {
      "parameters": {
        "url": "/api/eligibility/waiver-check"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        240,
        580
      ],
      "id": "3bb53e89-8ca7-4936-826d-dce224f20eec",
      "name": "waiverCheck"
    },
    {
      "parameters": {
        "toolDescription": "Read a specific resource",
        "url": "={{$('Webhook').item.json.body.fhir_server_url }}/{resourceType}/{resourceId}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -100,
        -80
      ],
      "id": "e160c2cd-9cda-4a5a-b080-5184fec47ea9",
      "name": "getResourceById",
      "credentials": {
        "httpBasicAuth": {
          "id": "vGFLDBapGQbigX65",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Search for all resources of a given type",
        "url": "http://165.22.13.117:7070/fhir/{resourceType}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={query_parameter_in_json}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "{query_parameter_in_json}",
              "description": "a json format parameter list for searching for resources with specific parameters"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -340,
        580
      ],
      "id": "0051e9cd-c694-4fe6-9b6c-6314f7dd9d17",
      "name": "getPatientResource",
      "credentials": {
        "httpBasicAuth": {
          "id": "vGFLDBapGQbigX65",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "insurance verification\n",
        "url": "/api/eligibility/verify-insurance"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -40,
        580
      ],
      "id": "0b2e54bd-0923-44af-bdce-dd6ae643f005",
      "name": "verifyInsurance"
    },
    {
      "parameters": {
        "toolDescription": "Delete a resource",
        "method": "DELETE",
        "url": "={{ $('Webhook').item.json.body.fhir_server_url }}/{resourceType}/{resourceId}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        320,
        -80
      ],
      "id": "370cc029-3aac-4961-881b-695b5b782a32",
      "name": "deleteResource",
      "credentials": {
        "httpBasicAuth": {
          "id": "vGFLDBapGQbigX65",
          "name": "Unnamed credential"
        }
      }
    },
    {
      "parameters": {
        "name": "verifyAgent",
        "workflowId": {
          "__rl": true,
          "value": "WGGX3RZkZXCbLSqa",
          "mode": "list",
          "cachedResultName": "RESCUE SMART-on-FHIR \u2014 Verification Agent Design"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        740,
        -60
      ],
      "id": "ea6785c2-0503-4d14-8c8e-fda0bec0245e",
      "name": "verifyAgent"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "b118593b-9350-40cf-a6a9-d1e3494da1c2",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -800,
        -400
      ],
      "id": "6350867d-6ecb-492a-83d9-480c747ac8c8",
      "name": "Webhook",
      "webhookId": "b118593b-9350-40cf-a6a9-d1e3494da1c2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -100,
        -560
      ],
      "id": "8b857b6d-278b-4597-b1de-6ed6b97d8963",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "execution_id",
                "value": "={{ $execution.id }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        460,
        -400
      ],
      "id": "507581e8-a132-4a1e-a863-94e2b4dae5d0",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b59480a7-eab7-4c64-8c52-f53ea18a4122",
              "leftValue": "={{ $('Webhook').item.json.body.keys()}}",
              "rightValue": "=system_prompt",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -580,
        -400
      ],
      "id": "4a4e9da5-e1c0-446e-a4b1-6392a920134d",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c848e3f8-3d21-4599-8c30-5902ccc0765b",
              "name": "system_prompt",
              "value": "={{ $('Webhook').item.json.body.system_prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        -500
      ],
      "id": "a62b3c18-6ce2-4ea0-b5b6-fd50fd39c482",
      "name": "provided_prompt"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "32d44dd9-512d-447d-9b90-09ffa36ce976",
              "name": "system_prompt",
              "value": "=You are an intelligent scheduler assistant for managing patient appointments using FHIR APIs. Your task is to handle all possible appointment scenarios efficiently and correctly. You should use correct tools to perform the task. you may have to use multiple tools in a sequence. If you need more information to complete the task, always ask user to clarify the request.\n\nYou should search for https://build.fhir.org/appointment.html, \n\n## Business Rules\n- New Patients: Always create a patient record if they don\u2019t exist.\n- Availability Check: Always verify provider availability before scheduling or rescheduling.\n- Alternative Options: If a time slot is unavailable, suggest free slots.\n\n## Potential steps you want to consider based on the patient's request:\n\n###Step 1: Identify the Patient\n- Check if the patient exists, always use first name last name and birthdate, retrieve their record using things like:\nGET https://your-fhir-server.com/Patient?given=John&family=Doe&birthdate=eq1980-01-01\n- If the patient does not exist, create a new patient record:\nPOST /Patient with first name (required), last name (required), date of birth (required) and demographic or contact details (optional)\n\n###Step 2: Find an Available Slot\n- Retrieve an available slot according to patients request (e.g., for a specific practitioner, time, or location) using\nGET /Slot?status=free\n- If you need slots for a specific Practitioner\nGET /Slot?schedule.actor=Practitioner/[practitioner-id]&status=free\n- If you need slots for a specific Location\nGET /Location?name=[location-name]\nGET /Slot?schedule.actor=Location/[location-id]&status=free\n- To search for available slots within a date range, use the start parameter\nGET /Slot?status=free&start=ge2025-02-20T00:00:00Z&start=lt2025-02-21T00:00:00Z\n- If no slots available, STOP HERE. provide available options to patient by remove practitioner, time, or location contraints.\n\n###Step 3: Retrieve Start, End, and Schedule for a Given Slot\n- Get start, end and scheduleId using GET /Slot/{slotId}\n\n###Step 4: Retrieve practionerId from retrieved Schedule\n- get practionerId using GET /Schedule/{scheduleId}\n\n###Step 4: Create an Appointment Resource\nPOST /Appointment with patient, provider, date, and reason. An example will be \n```{\n  \"resourceType\": \"Appointment\",\n  \"status\": \"booked\",\n  \"start\": \"2025-02-20T10:00:00Z\",\n  \"end\": \"2025-02-20T10:30:00Z\",\n  \"participant\": [\n    {\n      \"actor\": {\n        \"reference\": \"Patient/123\"\n      },\n      \"status\": \"accepted\"\n    },\n    {\n      \"actor\": {\n        \"reference\": \"Practitioner/456\"\n      },\n      \"status\": \"accepted\"\n    },\n    {\n      \"actor\": {\n        \"reference\": \"Location/789\"\n      },\n      \"status\": \"accepted\"\n    }\n    ],\n  \"slot\": [{\"reference\": \"Slot/12\"}]\n    }\n  ]\n}```\n\n### Step 5: Update the Slot status to be 'busy'\n\n### Reschedule an Existing Appointment\n### Cancel an Appointment\n\n### Confirm an Appointment\nGET /Appointment\nAn example of the query paramters will be like:\n{\n  \"query\": {\n    \"resourceType\": \"Appointment\",\n    \"query_parameter_in_json\": \"{\\\"patient\\\":\\\"Patient/{id} }\\\"}\"\n  }\n}\n\n\n## Final Reminder\nToday'date is {{ $now }}, You are located in Boston, MA, USA. Remember the FHIR server stores timestamps in UTC by default, you have to convert the time zone difference when creating and retrieve resources.",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        -300
      ],
      "id": "5c41ed2a-9ae6-4c17-bde6-cb9c068b99ee",
      "name": "default_prompt"
    }
  ],
  "connections": {
    "Schedule Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "getAllResources": {
      "ai_tool": [
        [
          {
            "node": "Schedule Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "createResource": {
      "ai_tool": [
        [
          {
            "node": "Schedule Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "updateResource": {
      "ai_tool": [
        [
          {
            "node": "Schedule Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Verification Agent": {
      "main": [
        []
      ]
    },
    "referralCheck": {
      "ai_tool": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "preAuthCheck": {
      "ai_tool": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "waiverCheck": {
      "ai_tool": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "getResourceById": {
      "ai_tool": [
        [
          {
            "node": "Schedule Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "getPatientResource": {
      "ai_tool": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "verifyInsurance": {
      "ai_tool": [
        [
          {
            "node": "Verification Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "deleteResource": {
      "ai_tool": [
        [
          {
            "node": "Schedule Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "verifyAgent": {
      "ai_tool": [
        []
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Schedule Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "provided_prompt",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "default_prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "provided_prompt": {
      "main": [
        [
          {
            "node": "Schedule Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "default_prompt": {
      "main": [
        [
          {
            "node": "Schedule Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "358aca93-2ffd-4745-bb94-20be82bfbfff",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-03-26T17:51:38.054Z",
      "updatedAt": "2025-03-26T17:53:18.475Z",
      "id": "ixkH8IGCz2Q89soq",
      "name": "type: core"
    },
    {
      "createdAt": "2025-02-07T19:25:06.365Z",
      "updatedAt": "2025-03-26T17:53:28.478Z",
      "id": "swsybkCsjhDW90oq",
      "name": "status: dev"
    }
  ]
}