{
  "createdAt": "2025-03-26T19:28:56.868Z",
  "updatedAt": "2025-04-09T17:01:50.000Z",
  "id": "zOSJ4AMpO5cMILRN",
  "name": "Interactive Agent Evaluation: Education Agent",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "id": "5a0733d3-01c7-4c47-b1b4-ea11499d3468",
      "typeVersion": 1.1,
      "name": "Workflow Input Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -160,
        460
      ],
      "id": "de440b56-6744-42e0-9462-ead6620717e8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Call API tool to obtain education materials",
        "url": "http://education-server:8080/api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{placeholder}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        1220,
        440
      ],
      "id": "e2326e5f-7982-407d-b680-869cf681ccf4",
      "name": "Education Material HTTP Request"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        460,
        660
      ],
      "id": "0534cd4c-c091-4c8a-8516-6227080b526a",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are the Genetic Education Agent for our eConsult system. Your mission is to provide comprehensive, clear, and personalized educational content regarding genetic conditions, inheritance patterns, test procedures, management options, and ethical, legal, and privacy concerns.\n\nWhen prompted by a patient you should be:\nAsking for their symptoms and chief complaint.\nAsking relevant follow-up questions to gather diagnostic information.\nOffering a likely diagnosis or recommendation based on the information gathered.\nOnce you provide a diagnosis, check with the patient to see if they are satisfied with your answer or they have further remarks.\nWhen you receive a message, you should greet the patient and ask about the purpose of their eVisit if appropriate.\n\nWhen the input token is \"<START>\", This is your sign to start the conversation by greeting the patient and inquiring about their reseon to visit. And end your message with the token <PATIENT>.\n\nAt any point, if you feel like the interaction with the patient should should conclude. That is, once you check with the patient and they confirm that your diagnosis is satisfactory, output a single token: <STOP>\n\nIf the patient\u2019s question requires a medical diagnosis or specialized medical knowledge, proceed to answer the query or follow-up accordingly. Make sure to end your output with the token \"<PATIENT>\".\n\nOtherwise, if the patient\u2019s question is strictly administrative (e.g., about scheduling, billing, appointment logistics, clinic policies, etc.), you must forward this query to the front-desk agent by repeating the input query and appending your response with the token \"<FRONT_DESK>\".\n\nYour response must always have a token at the end, by default. it should be <PATIENT>\n\n\nOnce you receive a message, make sure to always check the Redis memory to see the full context.\n\n2. **Steps**\nFollow the sequence of the search to provide answers. Always start with step 1, and then proceed to next steps if necessary.\n    - Step 1: Use the Tool [protocol] to search internal educational material/protocol. Wait for an output from it before using other tools. If satified results found, STOP HERE and do not proceed to Step 2.\n    - Step 2: Use the search genereviews tool [genereviews]. Wait for an output from it before proceeding to use other tools. If satified results found, STOP HERE and do not proceed to Step 3.\n    - step 3: Look it up in Wikipedia [Wikipedia]. If satified results found, STOP HERE and do not proceed to Step 3.\n    - Step 4: If no satified results found, try to use the knowledge you are trained on to provide an answer.\n\n\n2. **Tailoring to Patient Needs**\n   - Assess and adapt your explanation based on the patient\u2019s literacy level, cultural background, and any specific contextual cues provided in the request.\n   - Use plain language for patients with limited health literacy; provide more technical details when appropriate.\n   - Include culturally sensitive examples and analogies when explaining complex concepts.\n\n3. **Communication Style**\n   - Be concise, empathetic, and supportive.\n   - Use bullet points or numbered lists where it enhances clarity.\n   - If the topic is complex, break it down into sub-sections with clear headings.\n   - Invite the patient to ask follow-up questions if further clarification is needed.\n\n4. **Output Format**\n\n\n   - For the reply field, provide your response in plain text that can be included in a patient-facing report.\n   - For the reply field, Clearly label sections (e.g., \u201cOverview of the Condition,\u201d \u201cInheritance Patterns,\u201d \u201cTesting Procedure,\u201d \u201cManagement Options,\u201d \u201cEthical and Privacy Considerations\u201d) to enhance readability.\n\nYour goal is to ensure that the patient fully understands the topic in a manner that is both accessible and accurate, empowering them to make informed decisions about their genetic health.\n\n\n## Final Reminders\nHere is the current date/time: {{ $now }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        440,
        180
      ],
      "id": "58217d37-daae-4862-a128-c3dbfba04fb9",
      "name": "Education Agent"
    },
    {
      "parameters": {
        "name": "protocol",
        "description": "Vector database containing the hospital's Internal Education Material which contains verified, institution-specific educational material and references",
        "topK": 8
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        340,
        460
      ],
      "id": "e39cdeea-6e79-4d92-9158-15a40e1e7fdf",
      "name": "Search Internal Education Material"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
      "typeVersion": 1,
      "position": [
        1000,
        460
      ],
      "id": "6a619b92-21c8-4573-9023-ed6cc289a0dd",
      "name": "Wikipedia"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        980,
        660
      ],
      "id": "137fdeed-a51e-4306-8b99-0520567915b4",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "name": "genereviews",
        "description": "Vector database containing education material obtained from GeneReviews.",
        "topK": 8
      },
      "type": "@n8n/n8n-nodes-langchain.toolVectorStore",
      "typeVersion": 1,
      "position": [
        660,
        460
      ],
      "id": "ef60a204-def7-4306-a2ce-4647a469be1b",
      "name": "Search GeneReviews"
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        100,
        840
      ],
      "id": "3993ff65-c80a-4d8e-9b0f-81531b78b035",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "education",
          "mode": "list",
          "cachedResultName": "education"
        },
        "options": {
          "pineconeNamespace": "tier1_dummy_references"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        160,
        660
      ],
      "id": "6953d197-3326-4161-b166-03e259f5dec3",
      "name": "Pinecone Vector Store: Tier 1",
      "credentials": {
        "pineconeApi": {
          "id": "YoXkCj7xkYVRS0cz",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        620,
        840
      ],
      "id": "a23d13ad-ccab-4f43-88f8-2541a8f38251",
      "name": "Embeddings OpenAI2",
      "credentials": {
        "openAiApi": {
          "id": "5gmazfiFAFlABBU5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "education",
          "mode": "list",
          "cachedResultName": "education"
        },
        "options": {
          "pineconeNamespace": "tier2_dummy_references"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        680,
        660
      ],
      "id": "3cd51c99-62f3-460a-a73f-820cffb8c8cc",
      "name": "Pinecone Vector Store: Tier 2",
      "credentials": {
        "pineconeApi": {
          "id": "YoXkCj7xkYVRS0cz",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bdfcc15d-a70c-4fb4-9df6-5beaf18fa2d6",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        180
      ],
      "id": "83befdb9-af1f-4072-8280-5b7a2e75060f",
      "name": "Webhook",
      "webhookId": "bdfcc15d-a70c-4fb4-9df6-5beaf18fa2d6"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"msg\": \"conversation finished: Education Agent\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1060,
        180
      ],
      "id": "5e12eedc-3470-4377-98cb-7e90dbe3b87c",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"reply\": \"answer to the user query\",\n\t\"tools_called\": [\"genereviews\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        160,
        460
      ],
      "id": "09dbad26-8661-45b3-89e8-42f2953eb24e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6fbb766f-6dd3-4d01-8cc0-ff92e8f9fce2",
              "name": "chatInput",
              "value": "={{ $json.query }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        200,
        0
      ],
      "id": "f027f226-2c05-46cd-861b-92ab12b69215",
      "name": "Edit Fields1"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "typeVersion": 1.4,
      "position": [
        0,
        460
      ],
      "id": "4b2fccc8-4e9e-48cf-ae6e-05249dc4a073",
      "name": "Redis Chat Memory",
      "credentials": {
        "redis": {
          "id": "Ib3bWFlXBjukwLTb",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://congliu.app.n8n.cloud/webhook/4549813e-3274-43bf-b541-dcfda9854f00",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $json.reply }}"
            },
            {
              "name": "counter",
              "value": "={{ $('Edit Fields').item.json.counter }}"
            },
            {
              "name": "sessionId",
              "value": "={{ $('Edit Fields').item.json.sessionId }}"
            },
            {
              "name": "end_conversation",
              "value": "={{ [\"true\", true, \"1\", 1].includes($('Edit Fields').item.json.end_conversation) }}"
            },
            {
              "name": "patient_profile",
              "value": "={{ $('Edit Fields').item.json.patient_profile }}"
            },
            {
              "name": "target_agent",
              "value": "={{ $('Edit Fields').item.json.target_agent }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1580,
        60
      ],
      "id": "6af3acef-126e-45e1-b27d-8e4464283a0f",
      "name": "HTTP Request to Customized Patient Agent"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6fbb766f-6dd3-4d01-8cc0-ff92e8f9fce2",
              "name": "chatInput",
              "value": "={{ $json.body.message }}",
              "type": "string"
            },
            {
              "id": "3378b757-1dae-4d5c-ba84-45dbd15f7a8e",
              "name": "counter",
              "value": "={{ $json.body.counter + 1}} ",
              "type": "number"
            },
            {
              "id": "acaa3e0d-ead3-4019-bc81-02071201fa0f",
              "name": "sessionId",
              "value": "={{ $json.body.user_id }}",
              "type": "string"
            },
            {
              "id": "f7232c6e-3724-4664-9096-72924752a395",
              "name": "end_conversation",
              "value": "={{ [\"true\", true, \"1\", 1].includes($json.body.end_conversation) }}",
              "type": "boolean"
            },
            {
              "id": "295d1b3f-6237-48c0-9e72-06ebeae18c3b",
              "name": "patient_profile",
              "value": "={{ $json.body.patient_profile }}",
              "type": "string"
            },
            {
              "id": "a47060b8-062a-4059-ab98-cea56d4baf8d",
              "name": "target_agent",
              "value": "={{ $json.body.target_agent }}",
              "type": "string"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        200,
        180
      ],
      "id": "d8ce09fb-8a76-4c6c-98e4-a75dfba6647b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "conversation_1"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        860,
        -160
      ],
      "id": "07b2630d-e9b6-4e93-aba7-55aeeb4cf109",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "Ib3bWFlXBjukwLTb",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Code').item.json.target_agent }}",
                    "rightValue": "patient",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fa90ab01-93cf-4cb3-85dc-5f547c4c7845",
                    "leftValue": "={{ $('Code').item.json.target_agent }}",
                    "rightValue": "front_desk",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1400,
        180
      ],
      "id": "589e104e-66e5-4e46-8558-7b0d82de337f",
      "name": "Switch"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://congliu.app.n8n.cloud/webhook/413ab7a1-30ae-4276-a5d0-8d5ecda4f7a3",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $json.output }}"
            },
            {
              "name": "counter",
              "value": "={{ $('Edit Fields').item.json.counter }}"
            },
            {
              "name": "sessionId",
              "value": "={{ $('Edit Fields').item.json.sessionId }}"
            },
            {
              "name": "end_conversation",
              "value": "={{ [\"true\", true, \"1\", 1].includes($('Edit Fields').item.json.end_conversation) }}"
            },
            {
              "name": "patient_profile",
              "value": "={{ $('Edit Fields').item.json.patient_profile }}"
            },
            {
              "name": "target_agent",
              "value": "={{ $('Edit Fields').item.json.target_agent }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1580,
        280
      ],
      "id": "fade1616-13e4-4a8a-ac87-00cc140e0a6e",
      "name": "HTTP Request to Front Desk Agent"
    },
    {
      "parameters": {
        "jsCode": "const result = [];\n\nfor (const item of $input.all()) {\n  let message = item.json.output || \"\";\n  const containsStop = message.includes(\"<STOP>\");\n\n  // Default agent is null unless we detect one of the tags\n  let target_agent = null;\n\n  // Check for <PATIENT> token\n  if (message.includes(\"<PATIENT>\")) {\n    target_agent = \"patient\";\n    message = message.replace(\"<PATIENT>\", \"\");\n  }\n  // Check for <EDUCATION> token\n  else if (message.includes(\"<FRONT_DESK>\")) {\n    target_agent = \"front_desk\";\n    message = message.replace(\"<FRONT_DESK>\", \"\");\n  }\n\n  // Remove <STOP> token for final output\n  message = message.replace(\"<STOP>\", \"\").trim();\n\n  result.push({\n    json: {\n      reply: message,\n      end_conversation: containsStop,\n      target_agent: target_agent\n    }\n  });\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        840,
        180
      ],
      "id": "5b838747-c37a-4c56-8b4e-719630500d12",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://3eee-130-44-104-62.ngrok-free.app/receive_reply",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "reply",
              "value": "={{ $json.reply }}"
            },
            {
              "name": "user_id",
              "value": "={{ $('Edit Fields').item.json.sessionId }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1580,
        -120
      ],
      "id": "883461aa-6d79-47f1-b369-0a296bfcdf5c",
      "name": "HTTP Request"
    }
  ],
  "connections": {
    "Workflow Input Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Education Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Search Internal Education Material",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Education Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Internal Education Material": {
      "ai_tool": [
        [
          {
            "node": "Education Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Wikipedia": {
      "ai_tool": [
        [
          {
            "node": "Education Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Search GeneReviews",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search GeneReviews": {
      "ai_tool": [
        [
          {
            "node": "Education Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store: Tier 1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store: Tier 1": {
      "ai_vectorStore": [
        [
          {
            "node": "Search Internal Education Material",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store: Tier 2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store: Tier 2": {
      "ai_vectorStore": [
        [
          {
            "node": "Search GeneReviews",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        []
      ]
    },
    "Edit Fields1": {
      "main": [
        []
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Education Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Education Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "HTTP Request to Customized Patient Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request to Front Desk Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request to Customized Patient Agent": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Workflow Input Trigger": [
      {
        "json": {
          "query": "What is Hulu syndrome?"
        }
      }
    ]
  },
  "versionId": "b988ec1e-f858-48e7-8cc8-d9c2cc913dc4",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-03-26T17:51:52.394Z",
      "updatedAt": "2025-03-26T17:53:37.550Z",
      "id": "f1eRCMwsFVB12Daf",
      "name": "type: eval"
    },
    {
      "createdAt": "2025-02-07T19:25:06.365Z",
      "updatedAt": "2025-03-26T17:53:28.478Z",
      "id": "swsybkCsjhDW90oq",
      "name": "status: dev"
    }
  ]
}