Task 1: enter new patient:
    required_tool_call_sets = [
    { "createResource": 0 },  
        # direct POST /Patient  

    { "getResourceById": 0, "updateResource": 1 },  
        # upsert: try GET /Patient/{id} → PUT  

    { "getAllResources": 0, "createResource": 1 },  
        # list‐then‐create if not found in GET /Patient  

    { "getAllResources": 0, "deleteResource": 1, "createResource": 2 }  
        # cleanup duplicates (DELETE) → recreate  
    ]
    required_resource_types = ["Patient"]



Task 2a: search existing patient
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # primary: GET /Patient?…

    { "getResourceById": 0 }  
        # alternate: GET /Patient/{id} if id known
    ]
    required_resource_types = ["Patient"]



Task 2b: search nonexisting patient
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # primary: GET /Patient?…

    { "getResourceById": 0 }  
        # alternate: GET /Patient/{id} if id known
    ]
    required_resource_types = ["Patient"]


Task 03: enter medical history
    required_tool_call_sets = [
    { "createResource": 0 },  
        # POST /Condition

    { "getResourceById": 0, "updateResource": 1 },  
        # upsert via GET /Condition/{id} → PUT

    { "getAllResources": 0, "createResource": 1 }  
        # list → create if missing
    ]
    required_resource_types = ["Condition"]



Task 4a: Search Existing Medical History 
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # GET /Condition?subject=…

    { "getResourceById": 0 }  
        # GET /Condition/{id} if id known
    ]
    required_resource_types = ["Condition"]



Task 4b: Search Nonexistent Medical History
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # GET /Condition?subject=…

    { "getResourceById": 0 }  
        # GET /Condition/{id} if id known
    ]
    required_resource_types = ["Condition"]



Task 5: Enter Surgery Plan
    required_tool_call_sets = [
    { "createResource": 0 },  
        # POST /ServiceRequest

    { "getResourceById": 0, "updateResource": 1 },  
        # upsert via GET /ServiceRequest/{id} → PUT

    { "getAllResources": 0, "createResource": 1 }  
        # list → create if missing
    ]
    required_resource_types = ["ServiceRequest"]



Task 6a: Search Existing Surgery Plan
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # GET /ServiceRequest?subject=…&occurrence=…

    { "getResourceById": 0 }  
        # GET /ServiceRequest/{id} if id known
    ]
    required_resource_types = ["ServiceRequest"]


Task 6b: Search Nonexistent Surgery Plan
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # GET /ServiceRequest?subject=…&occurrence=…

    { "getResourceById": 0 }  
        # GET /ServiceRequest/{id} if id known
    ]
    required_resource_types = ["ServiceRequest"]



Task 7: Enter Insurance
    required_tool_call_sets = [
    # simplest: both creates
    { "createResource": 0,               # step 1: create RelatedPerson
        "createResource": 1 },             # step 2: create Coverage

    # handle existing RelatedPerson → update + create Coverage
    { "getResourceById": 0,              # GET RelatedPerson/{id}
        "updateResource": 1,               # PUT RelatedPerson/{id}
        "createResource": 2 },             # POST Coverage

    # list→cleanup→create both
    { "getAllResources": 0,              # GET RelatedPerson?…
        "deleteResource": 1,               # DELETE outdated RP
        "createResource": 2,               # POST new RP
        "createResource": 3 }              # POST Coverage
    ]
    required_resource_types = ["RelatedPerson", "Coverage"]



Task 8a: Search Existing Insurance
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # GET /Coverage?beneficiary=…

    { "getResourceById": 0 }  
        # GET /Coverage/{id} if id known
    ]
    required_resource_types = ["Coverage"]



Task 8b: Search Nonexistent Insurance
    required_tool_call_sets = [
    { "getAllResources": 0 },  
        # GET /Coverage?beneficiary=…

    { "getResourceById": 0 }  
        # GET /Coverage/{id} if id known
    ]
    required_resource_types = ["Coverage"]



Task 09a – Create Related Person
    required_tool_call_sets = [
    # Minimal “just create it”
    {"createResource": 0},

    # Cautious “check list then create”
    {"getAllResources": 0, "createResource": 1},

    # Cautious with cleanup “list → delete → create”
    {"getAllResources": 0, "deleteResource": 1, "createResource": 2},

    # Upsert via list → update
    {"getAllResources": 0, "updateResource": 1},

    # Upsert via direct fetch → update
    {"getResourceById": 0, "updateResource": 1},

    # Direct‐fetch fallback “if not found by id → create”
    {"getResourceById": 0, "createResource": 1},
    ]

    required_resource_types = ["RelatedPerson"]



Task 09b – Create Account
    required_tool_call_sets = [
        { "createResource": 0 },
        # Direct POST /Account with payload.

        { "getResourceById": 0, "updateResource": 1 },
        # Upsert flow: GET /Account/{id} to see if one exists, then PUT /Account/{id}.

        { "getAllResources": 0, "createResource": 1 },
        #  List‐then‐create: GET /Account?subject=Patient/PAT001 → POST if none found.

        { "getAllResources": 0, "deleteResource": 1, "createResource": 2 }
        # Cleanup‐then‐create: list existing accounts, DELETE any stale ones, then POST new.
    ]
    required_resource_types = ["Account"]



Task 09c Add Guarantor
    required_tool_call_sets = [
        { "updateResource": 0 },
        #  Direct PUT /Account/ACC001 with guarantor in payload.

        { "getResourceById": 0, "updateResource": 1 },
        # Fetch the existing account, modify it client-side, then PUT it back.

        { "getAllResources": 0, "updateResource": 1 },
        #  List all accounts for the patient, pick the right one, then PUT.

        { "getAllResources": 0, "deleteResource": 1, "createResource": 2 }
        # (Less common) List existing accounts, DELETE the old one, then POST a new account including guarantor.
    ]
    required_resource_types = ["Account"]



Task 10a Search Existing Guarantor
    required_tool_call_sets = [
        # Workflow lists all Account resources and finds the guarantor field
        {'getAllResources': 0},
        # Alternative: fetch the specific Account by ID and inspect its guarantor
        {'getResourceById': 0}
    ]
    required_resource_types = [
        # We must retrieve an Account resource containing a guarantor reference
        "Account"
    ]



Task 10b: Search Nonexistent Guarantor
    required_tool_call_sets = [
        # List all Account resources; finding none implies no guarantor
        {'getAllResources': 0},
        # Or attempt to fetch the specific Account by ID and see it's missing
        {'getResourceById': 0}
    ]
    required_resource_types = [
        # We're looking for Account resources (which would include guarantor data)
        "Account"
    ]


Task 11a: Find Available Slots
    required_tool_call_sets = [
        # The assistant should list Slot resources (filtered by status=free, sorted by start)
        {'getAllResources': 0}
    ]
    required_resource_types = [
        # We expect to work with Slot resources
        "Slot"
    ]


Task 11c Find Slots by Service
    required_tool_call_sets = [
        # Directly list all free Slot resources filtered by specialty via GET /Slot?specialty=…
        {'getAllResources': 0},  

        # First list Schedule resources by specialty (GET /Schedule?specialty=…),  
        # then fetch Slot entries for that schedule via GET /Slot?schedule=…
        {'getAllResources': 0, 'getAllResources': 1},  

        # First list Schedule resources (GET /Schedule?specialty=…),  
        # then fetch a single schedule by ID (GET /Schedule/{id}),  
        # then list Slot entries for that schedule (GET /Slot?schedule=…)  
        {'getAllResources': 0, 'getResourceById': 1, 'getAllResources': 2}
    ]

    required_resource_types = [
        # We expect to pull Slot resources at the end
        "Slot"
    ]



Task 11d Find Available Slots by Provider
    required_tool_call_sets = [
        # Direct slot lookup by practitioner‐actor filter:
        {'getAllResources': 0},  

        # Two‐step: first fetch Practitioner(s), then list Slot entries filtered by actor:
        {'getAllResources': 0, 'getAllResources': 1},  

        # Three‐step: fetch Practitioner, fetch Schedule(s) for that practitioner, then fetch Slot(s):
        {'getAllResources': 0, 'getAllResources': 1, 'getAllResources': 2},  

        # Alternative three‐step using getResourceById for the practitioner:
        {'getAllResources': 0, 'getResourceById': 1, 'getAllResources': 2}
    ]

    required_resource_types = [
        "Slot"  # Ultimately, we must return Slot resources
    ]



Task 12a Search Urgent Slots
    required_tool_call_sets = [
        # Direct free-slot query on Slot resource (using start & status filters)
        {'getAllResources': 0}
    ]

    required_resource_types = [
        # We’re returning Slot resources
        "Slot"
    ]



Task 12b Search Next Friday Slots
    required_tool_call_sets = [
        # Direct slot‐search for next Friday: GET /Slot?start=ge…&start=le…&status=free
        {'getAllResources': 0}
        # (Alternatively, one could fetch schedules first via GET /Schedule and then fetch slots
        # for that schedule via GET /Slot, but both use getAllResources, so the simple direct call suffices.)
    ]

    required_resource_types = [
        # We expect only Slot resources in the response
        "Slot"
    ]



Task 12c Search Follow-up Slots
    required_tool_call_sets = [
        # Direct one‐month follow-up slot query: GET /Slot?start=ge…&start=le…&status=free
        {'getAllResources': 0}
        # (Alternatively, one could fetch the Schedule first and then fetch slots for that schedule
        # but both use getAllResources, so the direct Slot query covers the core requirement.)
    ]

    required_resource_types = [
        # We expect Slot resources in the result
        "Slot"
    ]



Task 12d Search Wednesday Morning Slots
    required_tool_call_sets = [
        # Directly query Slot resources within each Wednesday morning window
        {'getAllResources': 0}
    ]
    required_resource_types = [
        # We’re retrieving Slot resources
        "Slot"
    ]



Task 13a Find Patient From Slot 1 - Dr. John Smith
    required_tool_call_sets = [
        # 1- Query Slot resources to find the matching time (GET /Slot)
        # 2- Query Appointment resources to find the booking on that slot (GET /Appointment)
        # 3- Retrieve the Patient by ID from the Appointment (GET /Patient/{id})
        {'getAllResources': 2, 'getResourceById': 1}
    ]
    required_resource_types = [
        # We need Slot to locate the time,
        # Appointment to get the participant reference,
        # Patient to fetch the full patient record.
        "Slot",
        "Appointment",
        "Patient"
    ]



Task 13b Find Patient From Slot - Dr. Smith John
    required_tool_call_sets = [
        # 1- GET /Slot to find next Monday’s 9am slot for Dr. Smith John (using schedule.actor params)
        # 2- GET /Appointment to look up the booking on that slot
        # 3- GET /Patient/{id} to retrieve the patient’s details
        {'getAllResources': 2, 'getResourceById': 1}
    ]
    required_resource_types = [
        # We need Slot to locate the correct time and practitioner,
        # Appointment to get the patient reference,
        # Patient to fetch the actual patient record.
        "Slot",
        "Appointment",
        "Patient"
    ]



Task 14a Make Appointment 1
    required_tool_call_sets = [
        {'getResourceById': 0, 'updateResource': 1},  # 1st: GET Slot/SLOT001; 2nd: PUT Appointment/APPOINTMENT001
        {'updateResource': 2}                         # 3rd: PUT Slot/SLOT001
    ]
    required_resource_types = [
        "Slot",        # first GET and third PUT
        "Appointment", # second PUT
    ]



Task 14a Make Appointment 2
    required_tool_call_sets = [
        {
            'updateResource': 0,  # 1st call: PUT Appointment/APPOINTMENT002
            'updateResource': 1   # 2nd call: PUT Slot/SLOT002
        }
    ]
    required_resource_types = [
        "Appointment",  # the appointment being updated first
        "Slot"          # then the slot being marked busy
    ]



Task 15a Cancel Next Appointment
    required_tool_call_sets = [
        {
            'getAllResources': 0,   # 1st call: GET /Appointment?patient=Patient/PAT001&status=booked to list upcoming appointments
            'getResourceById': 1,   # 2nd call: GET /Slot/{slotId} to fetch the slot details (start time) for each appointment
            'updateResource': 2,    # 3rd call: PUT /Appointment/{appointmentId} to set status="cancelled"
            'updateResource': 3     # 4th call: PUT /Slot/{slotId} to set status="free"
        }
    ]
    required_resource_types = [
        "Appointment",  # we list and then cancel the appointment
        "Slot"          # we fetch and then free up the associated slot
    ]



Task 15b Cancel Next Appointment with Provider
    required_tool_call_sets = [
        {
            'getAllResources': 0,   # 1st call: GET /Appointment?patient=Patient/PAT001&practitioner=Practitioner/PROVIDER001&status=booked
            'getResourceById': 1,   # 2nd call: GET /Slot/{slotId} to fetch each appointment’s slot start time
            'updateResource': 2,    # 3rd call: PUT /Appointment/{appointmentId} to set status="cancelled"
            'updateResource': 3     # 4th call: PUT /Slot/{slotId} to set status="free"
        }
    ]
    required_resource_types = [
        "Appointment",  # we list and then cancel the appointment
        "Slot"          # we fetch and then free up the associated slot
    ]



Task 15c Cancel Appointment on Monday
    required_tool_call_sets = [
        {
            'getAllResources': 0,    # 1st call: GET /Appointment?patient=Patient/PAT001&status=booked
            'getResourceById': 1,    # 2nd call: GET /Slot/{slotId}             ← check slot date
            'updateResource': 2,     # 3rd call: PUT /Appointment/{appointmentId} → status="cancelled"
            'updateResource': 3      # 4th call: PUT /Slot/{slotId}             → status="free"
        }
    ]
    required_resource_types = [
        "Appointment",  # listing & cancelling the appointment
        "Slot"          # fetching and freeing the associated slot
    ]



Task 16a add patient to waitlist
    required_tool_call_sets = [
        {'createResource': 0}  # POST /Appointment to create a new waitlist appointment
        {'getAllResources': 0, 'createResource': 1}  # Verify and then create
    ]

    required_resource_types = [
        "Appointment"
    ]



Task 16b Move Patient Out of Waitlist
    required_tool_call_sets = [
        # 1. Search for the waitlist appointment, then search for a free slot, then mark the slot busy, then update the appointment to “booked”
        {'getAllResources': 0, 'getResourceById': 1, 'updateResource': 2, 'updateResource': 3},
        # 2. Same as (1) but also delete the original waitlist entry after booking
        {'getAllResources': 0, 'getResourceById': 1, 'updateResource': 2, 'updateResource': 3, 'deleteResource': 4},
        # 3. Search waitlist, search slot, create a new booked appointment rather than updating the old one, then mark slot busy
        {'getAllResources': 0, 'getResourceById': 1, 'createResource': 2, 'updateResource': 3}
    ]

    required_resource_types = [
        "Appointment",  # waitlist entry and then the booked appointment
        "Slot"          # free slot to be claimed and then marked busy
    ]



Task 16c Remove Patient From Waitlist
    required_tool_call_sets = [
        {'getAllResources': 0, 'updateResource': 1},   # 1st: list waitlist appointments; 2nd: mark the found one “cancelled”
        {'getAllResources': 0, 'deleteResource': 1},   # 1st: list waitlist; 2nd: delete the entry entirely
        {'getResourceById': 0, 'updateResource': 1},    # 1st: fetch specific waitlist appointment; 2nd: cancel it
        {'getResourceById': 0, 'deleteResource': 1}     # 1st: fetch specific appointment; 2nd: remove it
    ]

    required_resource_types = [
        "Appointment"   # the waitlist Appointment being modified or removed
    ]



Task 17a Reschedule Today's Appointment to Next Monday at 9am
    required_tool_call_sets = [
        # Sequence A: search for current appointment → fetch its slot → search next-Monday slot → free current slot → busy next-Monday slot → update appointment
        {'getAllResources': 0, 'getResourceById': 1, 'getAllResources': 2, 'updateResource': 3, 'updateResource': 4, 'updateResource': 5},

        # Sequence B: fetch specific appointment by ID → fetch current slot by ID → fetch next-Monday slot by search → update current slot → update next-Monday slot → update appointment
        {'getResourceById': 0, 'getResourceById': 1, 'getAllResources': 2, 'updateResource': 3, 'updateResource': 4, 'updateResource': 5}
    ]
    required_resource_types = [
        "Appointment",  # the appointment being moved
        "Slot"          # the two slots being freed and then booked
    ]



Task 17b: Reschedule Appointment with Another Provider 
    required_tool_call_sets = [
    {'getAllResources': 0, 'updateResource': 1},
    {'getAllResources': 0, 'createResource': 1, 'deleteResource': None}
    ]
    required_resource_types = ["Slot", "Appointment"]
